from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram_bot.keyboards import main_menu
from config.config import ALLOWED_USERS, TELEGRAM_BOT_TOKEN, PROFIT_TARGET, STOP_LOSS
from telegram import Bot
from core.database import Session, Position, Account, Trade
from core.exchange import get_current_price
from core.signals import check_signals_for_all_symbols

allowed_filter = filters.User(ALLOWED_USERS)

SET_BALANCE, DELETE_POSITION, ADD_SYMBOL, ADD_PRICE, ADD_AMOUNT, ADD_LEVERAGE, ADD_DIRECTION = range(7)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def start(update, context):
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:", reply_markup=main_menu())

async def button_handler(update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'set_balance':
        if query.message.text != "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", reply_markup=main_menu())
        return SET_BALANCE

    elif query.data == 'delete_position':
        session = Session()
        positions = session.query(Position).filter(Position.user_id == user_id).all()

        if not positions:
            if query.message.text != "–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.":
                await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=main_menu())
            return ConversationHandler.END
        else:
            msg = "üìå –í—ã–±–µ—Ä–∏ ID –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:\n\n"
            for p in positions:
                msg += f"ID: {p.id} | {p.symbol} –ø–æ {p.entry_price}\n"

            if query.message.text != msg:
                await query.edit_message_text(msg)
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            context.user_data['awaiting_delete'] = True
            return DELETE_POSITION

    elif query.data == 'add_position':
        if query.message.text != "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT):":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT):")
        return ADD_SYMBOL

    elif query.data == 'balance':
        session = Session()
        account = session.query(Account).filter(Account.user_id == user_id).first()
        balance = account.balance if account else 0
        if query.message.text != f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}$":
            await query.edit_message_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}$", reply_markup=main_menu())

    elif query.data == 'view_positions':
        session = Session()
        positions = session.query(Position).filter(Position.user_id == user_id).all()
        if not positions:
            if query.message.text != "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.":
                await query.edit_message_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=main_menu())
        else:
            msg = "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
            for p in positions:
                current_price = get_current_price(p.symbol)
                if p.direction == 'BUY':
                    pnl_percent = ((current_price - p.entry_price) / p.entry_price) * 100
                else:
                    pnl_percent = ((p.entry_price - current_price) / p.entry_price) * 100
                msg += (
                    f"\nID: {p.id}\n"
                    f"–ú–æ–Ω–µ—Ç–∞: {p.symbol}\n"
                    f"–¢–∏–ø: {p.direction}\n"
                    f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {p.entry_price}\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n"
                    f"–ü—Ä–∏–±—ã–ª—å: {pnl_percent:.2f}%\n"
                )
            if query.message.text != msg:
                await query.edit_message_text(msg, reply_markup=main_menu())

    elif query.data == 'history':
        session = Session()
        trades = session.query(Trade).filter(Trade.user_id == user_id).order_by(Trade.id.desc()).limit(10).all()
        if not trades:
            if query.message.text != "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.":
                await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        else:
            msg = "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n"
            for trade in trades:
                msg += f"{trade.symbol}: {'üü¢' if trade.pnl >= 0 else 'üî¥'} {trade.pnl:.2f}$\n"
            if query.message.text != msg:
                await query.edit_message_text(msg, reply_markup=main_menu())

async def add_symbol(update, context):
    context.user_data['symbol'] = update.message.text.upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:")
    return ADD_PRICE

async def add_price(update, context):
    try:
        context.user_data['entry_price'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDT), –∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∏—Ç–µ –≤ —Å–¥–µ–ª–∫—É:")
        return ADD_AMOUNT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É!")
        return ADD_PRICE

async def add_amount(update, context):
    try:
        context.user_data['trade_amount_usdt'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 3 –¥–ª—è 3x):")
        return ADD_LEVERAGE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return ADD_AMOUNT

async def add_leverage(update, context):
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    try:
        context.user_data['leverage'] = float(update.message.text)
        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìà LONG (BUY)", callback_data="BUY"),
                InlineKeyboardButton("üìâ SHORT (SELL)", callback_data="SELL")
            ]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=reply_markup)
        return ADD_DIRECTION
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ!")
        return ADD_LEVERAGE

async def set_balance(update, context):
    session = Session()
    balance = float(update.message.text)
    user_id = update.effective_user.id
    account = session.query(Account).filter(Account.user_id == user_id).first()
    if not account:
        account = Account(user_id=user_id, balance=balance)
        session.add(account)
    else:
        account.balance = balance
    session.commit()
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {balance:.2f}$", reply_markup=main_menu())
    return ConversationHandler.END

async def handle_delete_position(update, context):
    session = Session()
    user_id = update.effective_user.id
    try:
        position_id = int(update.message.text)
        position = session.query(Position).filter(Position.id == position_id, Position.user_id == user_id).first()
        if not position:
            await update.message.reply_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
            return ConversationHandler.END

        current_price = get_current_price(position.symbol)
        if position.direction == 'BUY':
            pnl = (current_price - position.entry_price) * position.amount
        else:
            pnl = (position.entry_price - current_price) * position.amount

        account = session.query(Account).filter(Account.user_id == user_id).first()
        if not account:
            account = Account(user_id=user_id, balance=0)
            session.add(account)
        account.balance += pnl

        trade = Trade(user_id=user_id, symbol=position.symbol, pnl=pnl)
        session.add(trade)

        session.delete(position)
        session.commit()

        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º ID –ø–æ–∑–∏—Ü–∏–π
        session.execute("DELETE FROM sqlite_sequence WHERE name='positions'")
        positions = session.query(Position).filter(Position.user_id == user_id).order_by(Position.id).all()
        for idx, p in enumerate(positions, start=1):
            p.id = idx
        session.commit()

        await update.message.reply_text(
            f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞. PnL: {'üü¢' if pnl >= 0 else 'üî¥'} {pnl:.2f}$\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {account.balance:.2f}$",
            reply_markup=main_menu()
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}", reply_markup=main_menu())
    return ConversationHandler.END

async def auto_signals_check(application):
    signals = check_signals_for_all_symbols()
    general_msg = "üìå –û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
    good_signals = []
    for signal in signals:
        if signal['signal'] in ('LONG', 'SHORT'):
            good_signals.append(signal)
        general_msg += (
            f"{'üìó' if signal['signal']=='LONG' else 'üìï' if signal['signal']=='SHORT' else 'üìç'} "
            f"{signal['symbol']}: {signal['signal']}\n"
            f"–¶–µ–Ω–∞: {signal['close']}, RSI: {signal['rsi']:.2f}\n\n"
        )
    for user_id in ALLOWED_USERS:
        await bot.send_message(chat_id=user_id, text=general_msg)
    for signal in good_signals:
        msg = (
            f"{'üìó' if signal['signal']=='LONG' else 'üìï'} –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal['signal']}!\n\n"
            f"{signal['symbol']}\n–¶–µ–Ω–∞: {signal['close']}\n"
            f"RSI: {signal['rsi']:.2f}, MACD: {signal['macd']:.4f}\n"
            f"TP: {signal['bb_upper']:.2f}, SL: {signal['bb_lower']:.2f}"
        )
        for user_id in ALLOWED_USERS:
            await bot.send_message(chat_id=user_id, text=msg)

async def add_direction(update, context):
    query = update.callback_query
    await query.answer()
    direction = query.data
    user_id = query.from_user.id

    symbol = context.user_data['symbol']
    entry_price = context.user_data['entry_price']
    trade_amount_usdt = context.user_data['trade_amount_usdt']
    leverage = context.user_data['leverage']

    amount = (trade_amount_usdt * leverage) / entry_price
    take_profit = entry_price * (1 + PROFIT_TARGET)
    stop_loss = entry_price * (1 - STOP_LOSS)

    session = Session()
    position = Position(
        user_id=user_id,
        symbol=symbol,
        entry_price=entry_price,
        amount=amount,
        take_profit=take_profit,
        stop_loss=stop_loss,
        direction=direction
    )
    session.add(position)
    session.commit()

    msg = (
        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
        f"{symbol}, —Ü–µ–Ω–∞: {entry_price}, –ø–ª–µ—á–æ: {leverage}x\n"
        f"–¢–∏–ø: {direction}\n"
        f"–°—É–º–º–∞: {trade_amount_usdt} USDT\n"
        f"–û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏: {amount:.6f} {symbol.split('/')[0]}\n"
        f"TP: {take_profit:.2f}, SL: {stop_loss:.2f}"
    )

    if query.message.text != msg:
        await query.edit_message_text(msg, reply_markup=main_menu())
    return ConversationHandler.END

def setup_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button_handler, pattern="^(set_balance|delete_position|add_position)$")
        ],
        states={
            ADD_DIRECTION: [CallbackQueryHandler(add_direction)],
            SET_BALANCE: [MessageHandler(filters.TEXT & allowed_filter, set_balance)],
            DELETE_POSITION: [MessageHandler(filters.TEXT & allowed_filter, handle_delete_position)],
            ADD_SYMBOL: [MessageHandler(filters.TEXT & allowed_filter, add_symbol)],
            ADD_PRICE: [MessageHandler(filters.TEXT & allowed_filter, add_price)],
            ADD_AMOUNT: [MessageHandler(filters.TEXT & allowed_filter, add_amount)],
            ADD_LEVERAGE: [MessageHandler(filters.TEXT & allowed_filter, add_leverage)]
        },
        fallbacks=[]
    )
    app.add_handler(CommandHandler("start", start, allowed_filter))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(balance|view_positions|history)$"))
    app.add_handler(conv_handler)
