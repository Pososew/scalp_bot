from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram_bot.keyboards import main_menu
from config.config import ALLOWED_USERS
from core.database import Session, Position, Account
from core.exchange import get_current_price
from telegram_bot.keyboards import main_menu 
from config.config import PROFIT_TARGET, STOP_LOSS
from core.signals import check_signals_for_all_symbols
from telegram import Bot
from config.config import ALLOWED_USERS, TELEGRAM_BOT_TOKEN

allowed_filter = filters.User(ALLOWED_USERS)

SET_BALANCE, DELETE_POSITION, ADD_SYMBOL, ADD_PRICE, ADD_AMOUNT, ADD_LEVERAGE = range(6)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def start(update, context):
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:", reply_markup=main_menu())

async def button_handler(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'set_balance':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", reply_markup=main_menu())
        return SET_BALANCE

    elif query.data == 'delete_position':
        session = Session()
        positions = session.query(Position).all()

        if not positions:
            await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=main_menu())
            return ConversationHandler.END
        else:
            msg = "üìå –í—ã–±–µ—Ä–∏ ID –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:\n\n"
            for p in positions:
                msg += (f"ID: {p.id} | {p.symbol} –ø–æ {p.entry_price}\n")

            await query.edit_message_text(msg)
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            return DELETE_POSITION

    
    elif query.data == 'add_position':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT):")
        return ADD_SYMBOL
    
    elif query.data == 'balance':
        session = Session()
        account = session.query(Account).first()
        balance = account.balance if account else 0
        await query.edit_message_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}$", reply_markup=main_menu())

    elif query.data == 'view_positions':
        session = Session()
        positions = session.query(Position).all()
        if not positions:
            await query.edit_message_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=main_menu())
        else:
            msg = "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
            for p in positions:
                current_price = get_current_price(p.symbol)
                pnl_percent = ((current_price - p.entry_price) / p.entry_price) * 100
                msg += (f"\nID: {p.id}\n"
                        f"–ú–æ–Ω–µ—Ç–∞: {p.symbol}\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {p.entry_price}\n"
                        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n"
                        f"–ü—Ä–∏–±—ã–ª—å: {pnl_percent:.2f}%\n")
            await query.edit_message_text(msg, reply_markup=main_menu())

    elif query.data == 'signals':
        signals = check_signals_for_all_symbols()
        msg = "üìå –¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã:\n\n"
        for signal in signals:
            msg += (
                f"{'üìó' if signal['signal']=='LONG' else 'üìï' if signal['signal']=='SHORT' else 'üìç'} "
                f"{signal['symbol']}: {signal['signal']}\n"
                f"–¶–µ–Ω–∞: {signal['close']}\n"
                f"RSI: {signal['rsi']:.2f}, MACD: {signal['macd']:.4f}\n"
                f"TP: {signal['bb_upper']:.2f}, SL: {signal['bb_lower']:.2f}\n\n"
            )
        await query.message.reply_text(msg, reply_markup=main_menu())

    elif query.data == 'history':
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=main_menu())

async def add_symbol(update, context):
    context.user_data['symbol'] = update.message.text.upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:")
    return ADD_PRICE

async def add_price(update, context):
    try:
        context.user_data['entry_price'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDT), –∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∏—Ç–µ –≤ —Å–¥–µ–ª–∫—É:")
        return ADD_AMOUNT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É!")
        return ADD_PRICE

async def add_amount(update, context):
    try:
        context.user_data['trade_amount_usdt'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 3 –¥–ª—è 3x):")
        return ADD_LEVERAGE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return ADD_AMOUNT

async def add_leverage(update, context):
    try:
        leverage = float(update.message.text)
        symbol = context.user_data['symbol']
        entry_price = context.user_data['entry_price']
        trade_amount_usdt = context.user_data['trade_amount_usdt']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
        amount = (trade_amount_usdt * leverage) / entry_price

        # TP –∏ SL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        take_profit = entry_price * (1 + PROFIT_TARGET)
        stop_loss = entry_price * (1 - STOP_LOSS)

        session = Session()
        position = Position(
            symbol=symbol,
            entry_price=entry_price,
            amount=amount,
            take_profit=take_profit,
            stop_loss=stop_loss
        )
        session.add(position)
        session.commit()

        await update.message.reply_text(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"{symbol}, —Ü–µ–Ω–∞: {entry_price}, –ø–ª–µ—á–æ: {leverage}x\n"
            f"–°—É–º–º–∞: {trade_amount_usdt} USDT\n"
            f"–û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏: {amount:.6f} {symbol.split('/')[0]}\n"
            f"TP: {take_profit:.2f}, SL: {stop_loss:.2f}",
            reply_markup=main_menu()
        )

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ!")
        return ADD_LEVERAGE



async def set_balance(update, context):
    session = Session()
    balance = float(update.message.text)
    account = session.query(Account).first()
    if not account:
        account = Account(balance=balance)
        session.add(account)
    else:
        account.balance = balance
    session.commit()
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {balance:.2f}$", reply_markup=main_menu())
    return ConversationHandler.END

async def delete_position(update, context):
    session = Session()
    position_id = int(update.message.text)
    position = session.query(Position).filter(Position.id == position_id).first()

    if position:
        current_price = get_current_price(position.symbol)
        pnl = (current_price - position.entry_price) * position.amount

        account = session.query(Account).first()
        account.balance += pnl

        session.delete(position)
        session.commit()

        await update.message.reply_text(f"–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. PnL: {pnl:.2f}$. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {account.balance:.2f}$", reply_markup=main_menu())
    else:
        await update.message.reply_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())

    return ConversationHandler.END

async def auto_signals_check(application):
    signals = check_signals_for_all_symbols()

    general_msg = "üìå –û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
    good_signals = []

    for signal in signals:
        if signal['signal'] in ('LONG', 'SHORT'):
            good_signals.append(signal)

        general_msg += (
            f"{'üìó' if signal['signal']=='LONG' else 'üìï' if signal['signal']=='SHORT' else 'üìç'} "
            f"{signal['symbol']}: {signal['signal']}\n"
            f"–¶–µ–Ω–∞: {signal['close']}, RSI: {signal['rsi']:.2f}\n\n"
        )

    for user_id in ALLOWED_USERS:
        await bot.send_message(chat_id=user_id, text=general_msg)

    for signal in good_signals:
        msg = (
            f"{'üìó' if signal['signal']=='LONG' else 'üìï'} –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal['signal']}!\n\n"
            f"{signal['symbol']}\n–¶–µ–Ω–∞: {signal['close']}\n"
            f"RSI: {signal['rsi']:.2f}, MACD: {signal['macd']:.4f}\n"
            f"TP: {signal['bb_upper']:.2f}, SL: {signal['bb_lower']:.2f}"
        )
        for user_id in ALLOWED_USERS:
            await bot.send_message(chat_id=user_id, text=msg)

def setup_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button_handler, pattern="^(set_balance|delete_position|add_position)$")
        ],
        states={
        SET_BALANCE: [MessageHandler(filters.TEXT & allowed_filter, set_balance)],
        DELETE_POSITION: [MessageHandler(filters.TEXT & allowed_filter, delete_position)],
        ADD_SYMBOL: [MessageHandler(filters.TEXT & allowed_filter, add_symbol)],
        ADD_PRICE: [MessageHandler(filters.TEXT & allowed_filter, add_price)],
        ADD_AMOUNT: [MessageHandler(filters.TEXT & allowed_filter, add_amount)],
        ADD_LEVERAGE: [MessageHandler(filters.TEXT & allowed_filter, add_leverage)]  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!
        },

        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start, allowed_filter))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(balance|view_positions|history)$"))
    app.add_handler(conv_handler)

